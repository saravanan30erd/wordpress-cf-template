{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template to setup High Availability WordPress site",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
            "Label": {
                "default": "Availability Zone Configuration"
            },
            "Parameters": [
                "NumberOfAZs",
                "AvailabilityZones"
            ]
        },
        {
            "Label": {
                "default": "Network Configuration"
            },
            "Parameters": [
                "VPCCIDR",
                "PublicSubnet1CIDR",
                "PublicSubnet2CIDR",
                "PublicSubnet3CIDR",
                "PrivateSubnet1CIDR",
                "PrivateSubnet2CIDR",
                "PrivateSubnet3CIDR",
                "NATGatewayPerAZ"
            ]
        },
        {
            "Label": {
                "default": "Application server Configuration"
            },
            "Parameters": [
                "DesiredCapacity",
                "MinimumInstances",
                "MaximumInstances",
                "KeyName",
                "AppImageId",
                "InstanceType",
                "MaxBatchSize",
                "MinInstancesInService"
            ]
        },
        {
            "Label": {
                "default": "Jump Host(Bastion) server Configuration"
            },
            "Parameters": [
                "JumpHostKeyName",
                "JumpHostImageId",
                "JumpHostInstanceType",
                "RemoteIP"
            ]
        },
        {
            "Label": {
                "default": "Ansible Configuration(WordPress Deployment)"
            },
            "Parameters": [
              "AnsibleRepository",
              "AnsibleBranch",
              "AnsiblePlaybook"
            ]
        },
        {
            "Label": {
                "default": "Database Cluster Configuration"
            },
            "Parameters": [
              "DBClusterName",
              "DBUsername",
              "DBPassword",
              "DBName",
              "DBInstanceType"
            ]
        },
        {
            "Label": {
                "default": "WordPress Configuration"
            },
            "Parameters": [
              "WPVersion",
              "WPTitle",
              "WPAdminUser",
              "WPAdminPassword",
              "WPAdminEmail"
            ]
        }

      ],
      "ParameterLabels": {
        "MinInstancesInService": {
          "default" : "AutoScaling Rolling Update MinInstancesInService"
        },
        "MaxBatchSize": {
          "default": "AutoScaling Rolling Update MaxBatchSize"
        },
        "WPVersion": {
          "default" : "WordPress Version"
        },
        "WPTitle": {
          "default" : "WordPress Title"
        },
        "WPAdminUser": {
          "default" : "WordPress Admin Username"
        },
        "WPAdminPassword": {
          "default" : "WordPress Admin Password"
        },
        "WPAdminEmail" : {
          "default" : "WordPress Admin Email"
        },
        "DBClusterName" : {
          "default" : "DB Cluster Name"
        },
        "DBUsername" : {
          "default" : "DB Username"
        },
        "DBPassword" : {
          "default" : "DB Password"
        },
        "DBName" : {
          "default" : "DB Name"
        },
        "DBInstanceType" : {
          "default" : "DB Instance Type"
        },
        "RemoteIP" : {
            "default" : "Remote IP range allowed to SSH to Jump Host instance"
        },
        "AppImageId" : {
          "default" : "Image ID for Application servers"
        },
        "InstanceType" : {
          "default" : "Application server EC2 instance type"
        },
        "KeyName" : {
          "default" : "EC2 Key Pair for app servers"
        },
        "JumpHostImageId" : {
          "default" : "Image ID for JumpHost(Bastion) server"
        },
        "JumpHostInstanceType" : {
          "default" : "JumpHost server EC2 instance type"
        },
        "JumpHostKeyName" : {
          "default" : "EC2 Key Pair for JumpHost server"
        },
        "DesiredCapacity": {
          "default": "Desired Capacity in AutoScalingGroup"
        },
        "MinimumInstances": {
          "default": "Minimum instances in AutoScalingGroup"
        },
        "MaximumInstances": {
          "default": "Maximum instances in AutoScalingGroup"
        },
        "AvailabilityZones": {
            "default": "Availability Zones"
        },
        "NumberOfAZs": {
            "default": "Number of Availability Zones"
        },
        "PrivateSubnet1CIDR": {
            "default": "Private subnet 1 CIDR"
        },
        "PrivateSubnet2CIDR": {
            "default": "Private subnet 2 CIDR"
        },
        "PrivateSubnet3CIDR": {
            "default": "Private subnet 3 CIDR"
        },
        "PublicSubnet1CIDR": {
            "default": "Public subnet 1 CIDR"
        },
        "PublicSubnet2CIDR": {
            "default": "Public subnet 2 CIDR"
        },
        "PublicSubnet3CIDR": {
            "default": "Public subnet 3 CIDR"
        },
        "VPCCIDR": {
            "default": "VPC CIDR"
        },
        "NATGatewayPerAZ": {
            "default": "NAT Gateway Per Availability Zone"
        },
        "AnsibleRepository": {
            "default": "Ansible repository"
        },
        "AnsibleBranch": {
            "default": "Branch"
        },
        "AnsiblePlaybook": {
            "default": "Ansible playbook"
        }
      }
    }
  },
  "Parameters": {
    "MinInstancesInService": {
      "Description" : "Specifies the minimum number of instances that must be in service within the Auto Scaling group while AWS CloudFormation updates old instances.",
      "Default": 1,
      "Type": "Number"
    },
    "MaxBatchSize": {
      "Description": "Specifies the maximum number of instances that AWS CloudFormation updates.",
      "Default": 1,
      "Type": "Number"
    },
    "WPVersion": {
      "Description" : "WordPress Version to install",
      "Default" : "latest",
      "Type" : "String"
    },
    "WPTitle": {
      "Description" : "Provide Title for the WordPress site",
      "Default" : "HelloWorld",
      "Type": "String"
    },
    "WPAdminUser": {
      "Description" : "Provide Username for WordPress site admin",
      "Default" : "admin",
      "Type": "String"
    },
    "WPAdminPassword": {
      "Description" : "Provide Password for WordPress site admin user",
      "Default" : "admin",
      "Type" : "String"
    },
    "WPAdminEmail" : {
      "Description" : "Provide Email ID for WordPress site admin user",
      "Default" : "admin@example.com",
      "Type": "String"
    },
    "DBInstanceType": {
       "Description": "Aurora instance type",
       "Type": "String",
       "Default": "db.t2.small",
       "ConstraintDescription": "must be a valid RDS instance type."
   },
   "DBClusterName": {
       "Description": "The string that will be Aurora cluster name",
       "Type": "String",
       "Default" : "wordpress",
       "MinLength": "3",
       "MaxLength": "10",
       "AllowedPattern": "[a-z0-9 -]*",
       "ConstraintDescription": "Identifier names must be 3-6 characters and contain only a-z and 0-9."
   },
   "DBUsername": {
       "Description": "Aurora instance Master Username",
       "Type": "String",
       "Default" : "wordpress",
       "MinLength": "4",
       "MaxLength": "15",
       "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
       "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
   },
   "DBName": {
       "Description": "Database Name",
       "Type": "String",
       "Default" : "wordpress",
       "MinLength": "4",
       "MaxLength": "16",
       "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
       "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
   },
   "DBPassword": {
       "Description": "Aurora instance Master Password",
       "NoEcho": "true",
       "Type": "String",
       "MinLength": "8",
       "MaxLength": "41",
       "AllowedPattern": "[a-zA-Z0-9]*",
       "ConstraintDescription": "DB Password must be 8-41 characters and contain only alpha numeric characters."
   },
    "AnsibleRepository": {
        "Default": "https://github.com/saravanan30erd/wordpress-cf-template.git",
        "Description": "The git repository URL of WordPress Deployment ansible playbook",
        "Type": "String"
    },
    "AnsibleBranch": {
        "Default": "master",
        "Description": "The branch to checkout",
        "Type": "String"
    },
    "AnsiblePlaybook": {
        "Default": "ansible/wordpress.yml",
        "Description": "Ansible playbook to use",
        "Type": "String"
    },
    "RemoteIP" : {
        "Description" : "CIDR block parameter must be in the form x.x.x.x/0-28",
        "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
        "Default" : "0.0.0.0/0",
        "Type" : "String"
    },
    "JumpHostImageId" : {
      "Description" : "Image ID for Jump Host(Bastion) server",
      "Type" : "String"
    },
    "JumpHostInstanceType" : {
      "Description" : "Jump Host server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.nano",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "JumpHostKeyName" : {
      "Description" : "Please use same key pair for app servers and jump host for secure SSH access.",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "AppImageId" : {
      "Description" : "Image ID for Application servers. Note: Use Amazon Linux",
      "Type" : "String"
    },
    "InstanceType" : {
      "Description" : "Application server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.nano",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "KeyName" : {
      "Description" : "The EC2 Key Pair to allow SSH access to app servers, Please use same key pair for app servers and jump host for secure SSH access.",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "DesiredCapacity": {
      "Default": "2",
      "Description": "Desired Capacity in AutoScalingGroup",
      "Type": "String"
    },
    "MinimumInstances": {
      "Description": "Minimum instances in AutoScalingGroup",
      "Default": "2",
      "Type": "String"
    },
    "MaximumInstances": {
      "Description": "Maximum instances in AutoScalingGroup",
      "Default": "3",
      "Type": "String"
    },
    "NumberOfAZs": {
        "AllowedValues": [
            "2",
            "3"
        ],
        "Default": "2",
        "Description": "Number of Availability Zones to use in the VPC.",
        "Type": "String"
    },
    "AvailabilityZones": {
        "Description": "List of Availability Zones to use for the subnets in the VPC.  This must match your selection in the Number of Availability Zones parameter.",
        "Type": "List<AWS::EC2::AvailabilityZone::Name>"
    },
    "PrivateSubnet1CIDR": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.1.0/24",
        "Description": "CIDR block for private subnet 1 located in Availability Zone 1",
        "Type": "String"
    },
    "PrivateSubnet2CIDR": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.2.0/24",
        "Description": "CIDR block for private subnet 2 located in Availability Zone 2",
        "Type": "String"
    },
    "PrivateSubnet3CIDR": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.3.0/24",
        "Description": "CIDR block for private subnet 3 located in Availability Zone 3",
        "Type": "String"
    },
    "PublicSubnet1CIDR": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.4.0/24",
        "Description": "CIDR block for the public subnet 1 located in Availability Zone 1",
        "Type": "String"
    },
    "PublicSubnet2CIDR": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.5.0/24",
        "Description": "CIDR block for the public subnet 2 located in Availability Zone 2",
        "Type": "String"
    },
    "PublicSubnet3CIDR": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.6.0/24",
        "Description": "CIDR block for the public subnet 3 located in Availability Zone 3",
        "Type": "String"
    },
    "VPCCIDR": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.0.0/16",
        "Description": "CIDR block for the VPC",
        "Type": "String"
    },
    "NATGatewayPerAZ": {
      "Default": "false",
      "Description": "Set to true will create separate NAT Gateway per Availability Zone.",
      "AllowedValues": [
          "true",
          "false"
      ],
      "Type": "String"
    }
  },
  "Conditions": {
    "3AZCondition": {
        "Fn::Equals": [
            {
                "Ref": "NumberOfAZs"
            },
            "3"
        ]
    },
    "MultiNATGateway": {
      "Fn::Equals": [
          {
              "Ref": "NATGatewayPerAZ"
          },
          "true"
      ]
    },
    "MultiNATGateway&3AZCondition": {
      "Fn::And": [
          {
              "Condition": "MultiNATGateway"
          },
          {
              "Condition": "3AZCondition"
          }
      ]
    }
  },
  "Resources": {
    "VPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
            "CidrBlock": {
                "Ref": "VPCCIDR"
            },
            "EnableDnsSupport": "true",
            "EnableDnsHostnames": "true",
            "Tags": [
              {
                "Key" : "Name",
                "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "vpc"] ] }
              }
            ]
        }
    },
    "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "ig"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Public"
                }
            ]
        }
    },
    "VPCGatewayAttachment": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "InternetGatewayId": {
                "Ref": "InternetGateway"
            }
        }
    },
    "PrivateSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "CidrBlock": {
                "Ref": "PrivateSubnet1CIDR"
            },
            "AvailabilityZone": {
                "Fn::Select": [
                    "0",
                    {
                        "Ref": "AvailabilityZones"
                    }
                ]
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "private-subnet-1"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ]
        }
    },
    "PrivateSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "CidrBlock": {
                "Ref": "PrivateSubnet2CIDR"
            },
            "AvailabilityZone": {
                "Fn::Select": [
                    "1",
                    {
                        "Ref": "AvailabilityZones"
                    }
                ]
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "private-subnet-2"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ]
        }
    },
    "PrivateSubnet3": {
        "Condition": "3AZCondition",
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "CidrBlock": {
                "Ref": "PrivateSubnet3CIDR"
            },
            "AvailabilityZone": {
                "Fn::Select": [
                    "2",
                    {
                        "Ref": "AvailabilityZones"
                    }
                ]
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "private-subnet-3"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ]
        }
    },
    "PublicSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "CidrBlock": {
                "Ref": "PublicSubnet1CIDR"
            },
            "AvailabilityZone": {
                "Fn::Select": [
                    "0",
                    {
                        "Ref": "AvailabilityZones"
                    }
                ]
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "public-subnet-1"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Public"
                }
            ],
            "MapPublicIpOnLaunch": true
        }
    },
    "PublicSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "CidrBlock": {
                "Ref": "PublicSubnet2CIDR"
            },
            "AvailabilityZone": {
                "Fn::Select": [
                    "1",
                    {
                        "Ref": "AvailabilityZones"
                    }
                ]
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "public-subnet-2"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Public"
                }
            ],
            "MapPublicIpOnLaunch": true
        }
    },
    "PublicSubnet3": {
        "Condition": "3AZCondition",
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "CidrBlock": {
                "Ref": "PublicSubnet3CIDR"
            },
            "AvailabilityZone": {
                "Fn::Select": [
                    "2",
                    {
                        "Ref": "AvailabilityZones"
                    }
                ]
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "public-subnet-3"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Public"
                }
            ],
            "MapPublicIpOnLaunch": true
        }
    },
    "PrivateSubnet1RouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "private-rt-1"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ]
        }
    },
    "PrivateSubnet1Route": {
        "Type": "AWS::EC2::Route",
        "Properties": {
            "RouteTableId": {
                "Ref": "PrivateSubnet1RouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "NatGatewayId": {
              "Ref": "NATGateway1"
            }
        }
    },
    "PrivateSubnet1RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "PrivateSubnet1"
            },
            "RouteTableId": {
                "Ref": "PrivateSubnet1RouteTable"
            }
        }
    },
    "PrivateSubnet2RouteTable": {
        "Condition": "MultiNATGateway",
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "private-rt-2"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ]
        }
    },
    "PrivateSubnet2Route": {
      "Condition": "MultiNATGateway",
        "Type": "AWS::EC2::Route",
        "Properties": {
            "RouteTableId": {
                "Ref": "PrivateSubnet2RouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "NatGatewayId": {
              "Ref": "NATGateway2"
            }
        }
    },
    "PrivateSubnet2RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "PrivateSubnet2"
            },
            "RouteTableId": {
              "Fn::If": [
                  "MultiNATGateway",
                  {
                      "Ref": "PrivateSubnet2RouteTable"
                  },
                  {
                      "Ref": "PrivateSubnet1RouteTable"
                  }
              ]
            }
        }
    },
    "PrivateSubnet3RouteTable": {
        "Condition": "MultiNATGateway&3AZCondition",
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "private-rt-3"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ]
        }
    },
    "PrivateSubnet3Route": {
        "Condition": "MultiNATGateway&3AZCondition",
        "Type": "AWS::EC2::Route",
        "Properties": {
            "RouteTableId": {
                "Ref": "PrivateSubnet3RouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "NatGatewayId": {
              "Ref": "NATGateway3"
            }
        }
    },
    "PrivateSubnet3RouteTableAssociation": {
        "Condition": "3AZCondition",
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "PrivateSubnet3"
            },
            "RouteTableId": {
              "Fn::If": [
                  "MultiNATGateway",
                  {
                      "Ref": "PrivateSubnet3RouteTable"
                  },
                  {
                      "Ref": "PrivateSubnet1RouteTable"
                  }
              ]
            }
        }
    },
    "PublicSubnetRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "public-rt"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Public"
                }
            ]
        }
    },
    "PublicSubnetRoute": {
        "DependsOn": "VPCGatewayAttachment",
        "Type": "AWS::EC2::Route",
        "Properties": {
            "RouteTableId": {
                "Ref": "PublicSubnetRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
                "Ref": "InternetGateway"
            }
        }
    },
    "PublicSubnet1RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "PublicSubnet1"
            },
            "RouteTableId": {
                "Ref": "PublicSubnetRouteTable"
            }
        }
    },
    "PublicSubnet2RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "PublicSubnet2"
            },
            "RouteTableId": {
                "Ref": "PublicSubnetRouteTable"
            }
        }
    },
    "PublicSubnet3RouteTableAssociation": {
        "Condition": "3AZCondition",
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "PublicSubnet3"
            },
            "RouteTableId": {
                "Ref": "PublicSubnetRouteTable"
            }
        }
    },
    "NATEIP1": {
        "DependsOn": "VPCGatewayAttachment",
        "Type": "AWS::EC2::EIP",
        "Properties": {
            "Domain": "vpc"
        }
    },
    "NATGateway1": {
        "DependsOn": "VPCGatewayAttachment",
        "Type": "AWS::EC2::NatGateway",
        "Properties": {
            "AllocationId": {
                "Fn::GetAtt": [
                    "NATEIP1",
                    "AllocationId"
                ]
            },
            "SubnetId": {
                "Ref": "PublicSubnet1"
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "nat-gateway-1"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ]
        }
    },
    "NATEIP2": {
        "Condition": "MultiNATGateway",
        "DependsOn": "VPCGatewayAttachment",
        "Type": "AWS::EC2::EIP",
        "Properties": {
            "Domain": "vpc"
        }
    },
    "NATGateway2": {
        "Condition": "MultiNATGateway",
        "DependsOn": "VPCGatewayAttachment",
        "Type": "AWS::EC2::NatGateway",
        "Properties": {
            "AllocationId": {
                "Fn::GetAtt": [
                    "NATEIP2",
                    "AllocationId"
                ]
            },
            "SubnetId": {
                "Ref": "PublicSubnet2"
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "nat-gateway-2"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ]
        }
    },
    "NATEIP3": {
        "Condition": "MultiNATGateway&3AZCondition",
        "DependsOn": "VPCGatewayAttachment",
        "Type": "AWS::EC2::EIP",
        "Properties": {
            "Domain": "vpc"
        }
    },
    "NATGateway3": {
        "Condition": "MultiNATGateway&3AZCondition",
        "DependsOn": "VPCGatewayAttachment",
        "Type": "AWS::EC2::NatGateway",
        "Properties": {
            "AllocationId": {
                "Fn::GetAtt": [
                    "NATEIP3",
                    "AllocationId"
                ]
            },
            "SubnetId": {
                "Ref": "PublicSubnet3"
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "nat-gateway-3"] ] }
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ]
        }
    },
    "AppServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AutoScalingGroupName" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "app-asg"] ] },
        "VPCZoneIdentifier" : [
          { "Ref" : "PrivateSubnet1" },
          { "Ref" : "PrivateSubnet2" },
          {
            "Fn::If": [
                "3AZCondition",
                {
                    "Ref": "PrivateSubnet3"
                },
                {
                    "Ref": "AWS::NoValue"
                }
            ]
          }
        ],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : { "Ref" : "MinimumInstances" },
        "MaxSize" : { "Ref" : "MaximumInstances" },
        "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ],
        "HealthCheckGracePeriod" : 600,
        "HealthCheckType" : "ELB",
        "DesiredCapacity" : { "Ref" : "DesiredCapacity" },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "app-instance"] ] },
          "PropagateAtLaunch" : "true"
          }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M",
          "Count"   : "1"
        }
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
        "MaxBatchSize" : {"Ref" : "MaxBatchSize"},
        "MinInstancesInService" : {"Ref" : "MinInstancesInService"},
        "PauseTime" : "PT15M",
        "WaitOnResourceSignals": "true"
        }
      },
      "DependsOn" : "DatabasePrimaryInstance"
    },
    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Ref" : "AppImageId" },
        "SecurityGroups" : [ { "Ref" : "AppSecurityGroup" } ],
        "InstanceType" : { "Ref" : "InstanceType" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "sleep 10\n",
                       "yum update -y\n",
                       "while [ $? -ne 0 ]; do\n",
                       "sleep 10\n",
                       "yum update -y\n",
                       "done\n",
                       "yum install python27 python27-pip git aws-cfn-bootstrap -y\n",
                       "pip install ansible\n",
                       "/usr/local/bin/ansible-pull -U ", {"Ref": "AnsibleRepository"},
                       " -C ", {"Ref": "AnsibleBranch"},
                       " ", {"Ref": "AnsiblePlaybook"},
                       " -e wp_version=", {"Ref": "WPVersion"},
                       " -e db_user=", {"Ref": "DBUsername"},
                       " -e db_name=", {"Ref": "DBName"},
                       " -e db_password=", {"Ref": "DBPassword"},
                       " -e db_host=", { "Fn::GetAtt": [ "DBCluster", "Endpoint.Address" ] },
                       " -e wp_title=", {"Ref": "WPTitle"},
                       " -e wp_siteurl=", { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ApplicationLoadBalancer", "DNSName" ]} ]]},
                       " -e wp_admin_user=", {"Ref": "WPAdminUser"},
                       " -e wp_admin_password=", {"Ref": "WPAdminPassword"},
                       " -e wp_admin_email=", {"Ref": "WPAdminEmail"},
                       " -o\n",
                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource AppServerGroup ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "DependsOn": ["DatabasePrimaryInstance","ApplicationLoadBalancer"]
    },
    "WebServerScaleUpPolicy" : {
    "Type" : "AWS::AutoScaling::ScalingPolicy",
    "Properties" : {
      "AdjustmentType" : "ChangeInCapacity",
      "AutoScalingGroupName" : { "Ref" : "AppServerGroup" },
      "Cooldown" : "180",
      "ScalingAdjustment" : "1"
    }
  },
  "WebServerScaleDownPolicy" : {
    "Type" : "AWS::AutoScaling::ScalingPolicy",
    "Properties" : {
      "AdjustmentType" : "ChangeInCapacity",
      "AutoScalingGroupName" : { "Ref" : "AppServerGroup" },
      "Cooldown" : "180",
      "ScalingAdjustment" : "-1"
    }
  },

  "CPUAlarmHigh": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
      "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
      "MetricName": "CPUUtilization",
      "Namespace": "AWS/EC2",
      "Statistic": "Average",
      "Period": "300",
      "EvaluationPeriods": "2",
      "Threshold": "90",
      "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
      "Dimensions": [
        {
          "Name": "AutoScalingGroupName",
          "Value": { "Ref": "AppServerGroup" }
        }
      ],
      "ComparisonOperator": "GreaterThanThreshold"
    }
  },
  "CPUAlarmLow": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
      "AlarmDescription": "Scale-down if CPU < 40% for 10 minutes",
      "MetricName": "CPUUtilization",
      "Namespace": "AWS/EC2",
      "Statistic": "Average",
      "Period": "180",
      "EvaluationPeriods": "2",
      "Threshold": "40",
      "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
      "Dimensions": [
        {
          "Name": "AutoScalingGroupName",
          "Value": { "Ref": "AppServerGroup" }
        }
      ],
      "ComparisonOperator": "LessThanThreshold"
    }
  },
  "ApplicationLoadBalancer" : {
    "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
    "Properties" : {
      "SecurityGroups" : [ { "Ref" : "ALBSecurityGroup" } ],
      "Subnets" : [
        { "Ref" : "PublicSubnet1" },
        { "Ref" : "PublicSubnet2" },
        {
          "Fn::If": [
              "3AZCondition",
              {
                  "Ref": "PublicSubnet3"
              },
              {
                  "Ref": "AWS::NoValue"
              }
          ]
        }
      ],
      "Tags" : [
          {
              "Key": "Name",
              "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "alb"] ] }
          }
      ]
    }
  },
  "ALBListener" : {
    "Type" : "AWS::ElasticLoadBalancingV2::Listener",
    "Properties" : {
      "DefaultActions" : [{
        "Type" : "forward",
        "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
      }],
      "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
      "Port" : "80",
      "Protocol" : "HTTP"
    }
  },

  "ALBTargetGroup" : {
    "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
    "Properties" : {
      "HealthCheckIntervalSeconds" : 30,
      "HealthCheckTimeoutSeconds" : 5,
      "HealthyThresholdCount" : 3,
      "HealthCheckPath": "/",
      "Port" : 80,
      "Protocol" : "HTTP",
      "Matcher" : {
        "HttpCode" : "200"
      },
      "UnhealthyThresholdCount" : 5,
      "VpcId" : {"Ref" : "VPC"},
      "TargetGroupAttributes" :
          [ { "Key" : "stickiness.enabled", "Value" : "true" },
            { "Key" : "stickiness.type", "Value" : "lb_cookie" },
            { "Key" : "stickiness.lb_cookie.duration_seconds", "Value" : "300" }
        ],
      "Tags" : [
        {
        "Key": "Name",
        "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "target-group"] ] }
      }
      ]
    }
  },
  "ALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "alb-sg"] ] },
        "GroupDescription": "Enable HTTP and HTTPS access for All",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" }
        ],
        "VpcId": { "Ref": "VPC" }
      }
    },
    "AppSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "app-sg"] ] },
        "GroupDescription" : "Enable HTTP access only to the load balancer and SSH access to Jump Host server",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "ALBSecurityGroup" } },
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "JumpHostSecurityGroup" } }
        ],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "JumpHostInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "SecurityGroupIds" : [ { "Ref" : "JumpHostSecurityGroup" } ],
        "KeyName" : { "Ref" : "JumpHostKeyName" },
        "InstanceType" : { "Ref" : "JumpHostInstanceType" },
        "ImageId" : { "Ref" : "JumpHostImageId" },
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "Tags" : [
          {
          "Key": "Name",
          "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "jumphost-instance"] ] }
          }
        ]
      },
      "DependsOn": "VPCGatewayAttachment"
   },
   "JumpHostEIP" : {
     "Type" : "AWS::EC2::EIP",
     "Properties" : {
      "InstanceId" : { "Ref" : "JumpHostInstance" },
      "Domain" : "vpc"
      },
      "DependsOn": "VPCGatewayAttachment"
   },
    "JumpHostSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "jumphost-sg"] ] },
        "GroupDescription" : "Enable secure SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "RemoteIP" } }
        ],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "DB subnet group for Aurora instances",
        "SubnetIds": [
          { "Ref" : "PrivateSubnet1" },
          { "Ref" : "PrivateSubnet2" },
          {
            "Fn::If": [
                "3AZCondition",
                {
                    "Ref": "PrivateSubnet3"
                },
                {
                    "Ref": "AWS::NoValue"
                }
            ]
          }
        ],
        "Tags": [
                {
                  "Key": "Name",
                  "Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "db-subnet-group"] ] }
                }
        ]
    },
    "DependsOn" : "NATGateway1"
  },
  "DBCluster": {
    "Type": "AWS::RDS::DBCluster",
    "Properties": {
        "DBClusterIdentifier" : { "Ref" : "DBClusterName" },
        "Engine": "aurora",
        "MasterUsername": {
            "Ref": "DBUsername"
        },
        "DatabaseName" : { "Ref" : "DBName" },
        "MasterUserPassword": {
            "Ref": "DBPassword"
        },
        "DBSubnetGroupName": {
            "Ref": "DBSubnetGroup"
        },
        "VpcSecurityGroupIds": [
            {
                "Ref": "DBSecurityGroup"
            }
        ]
    }
  },
  "DatabasePrimaryInstance": {
    "Type": "AWS::RDS::DBInstance",
    "Properties": {
        "DBClusterIdentifier": {
            "Ref": "DBCluster"
        },
        "DBInstanceClass": {
            "Ref": "DBInstanceType"
        },
        "Engine": "aurora",
        "DBSubnetGroupName": {
            "Ref": "DBSubnetGroup"
        },
        "PubliclyAccessible": false,
        "Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "db-instance"] ] } }]
    }
  },
  "DatabaseReplicaInstance": {
    "Type": "AWS::RDS::DBInstance",
    "Properties": {
        "DBClusterIdentifier": {
            "Ref": "DBCluster"
        },
        "DBInstanceClass": {
            "Ref": "DBInstanceType"
        },
        "Engine": "aurora",
        "DBSubnetGroupName": {
            "Ref": "DBSubnetGroup"
        },
        "PubliclyAccessible": false,
        "Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "db-replica"] ] } }]
    }
  },
  "DBSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
        "GroupName": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "db-sg"] ] },
				"GroupDescription" : "SecurityGroup for DB",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [
					{ "IpProtocol" : "tcp", "FromPort" : "3306", "ToPort" : "3306", "SourceSecurityGroupId" : { "Ref" : "AppSecurityGroup" } }
				]
			}
	}

  },
  "Outputs": {
    "JumpHostIP" : {
      "Value" : { "Ref" : "JumpHostEIP" },
      "Description" : "Jump Host IP for SSH access"
    },
    "WebsiteURL" : {
    "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ApplicationLoadBalancer", "DNSName" ]}, "/" ]]},
    "Description" : "WordPress Website URL"
    }
  }
}
